{"version":3,"sources":["FifteenPuzzle.js","index.js"],"names":["FifteenPuzzle","mode","setMode","useState","board","setBoard","size","setSize","rows","columns","moves","setMoves","time","setTime","intervalId","setIntervalId","rankings","setRankings","image","setImage","assistMode","setAssistMode","gameStarted","setGameStarted","gameCleared","setGameCleared","fileInputRef","useRef","generateBoard","useCallback","totalTiles","newBoard","Array","from","length","_","index","push","shuffleBoard","isSolvable","chunks","useEffect","isBoardInOrder","clearInterval","prevRankings","flatBoard","shuffledBoard","i","j","Math","floor","random","arr","ceil","slice","flat","inversions","emptyTileIndex","indexOf","findEmptyCell","rowIndex","colIndex","row","col","isValidMove","emptyCell","handleModeChange","newMode","handleSizeChange","event","name","value","target","prevSize","parseInt","img","Image","onload","aspectRatio","width","height","round","max","src","_jsxs","className","children","_jsx","concat","onClick","_Fragment","type","onChange","min","handleNewGame","handleReset","handleImageDropAreaClick","current","click","ref","file","files","reader","FileReader","e","result","readAsDataURL","accept","style","display","alt","checked","handleAssistModeChange","gridTemplateRows","gridTemplateColumns","map","cell","handleCellClick","prevBoard","rowDir","colDir","sign","currentRow","currentCol","nextRow","nextCol","prevMoves","id","setInterval","prevTime","backgroundImage","backgroundSize","backgroundPosition","border","color","textShadow","ranking","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a269283.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport './index.css';\r\n\r\nconst FifteenPuzzle = () => {\r\n  const [mode, setMode] = useState('normal');\r\n  const [board, setBoard] = useState([]);\r\n  const [size, setSize] = useState({ rows: 4, columns: 4 });\r\n  const [moves, setMoves] = useState(0);\r\n  const [time, setTime] = useState(0);\r\n  const [intervalId, setIntervalId] = useState(null);\r\n  const [rankings, setRankings] = useState([]);\r\n  const [image, setImage] = useState(null);\r\n  const [assistMode, setAssistMode] = useState(false);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [gameCleared, setGameCleared] = useState(false);\r\n  const fileInputRef = useRef(null);\r\n\r\n  const generateBoard = useCallback(() => {\r\n    const { rows, columns } = size;\r\n    const totalTiles = rows * columns;\r\n    let newBoard;\r\n    do {\r\n      newBoard = Array.from({ length: totalTiles - 1 }, (_, index) => index + 1);\r\n      newBoard.push('');\r\n      newBoard = shuffleBoard(newBoard);\r\n    } while (!isSolvable(newBoard, rows, columns));\r\n    setBoard(chunks(newBoard, columns));\r\n    setGameCleared(false);\r\n  }, [size]);\r\n\r\n  useEffect(() => {\r\n    generateBoard();\r\n  }, [size, generateBoard]);\r\n\r\n  useEffect(() => {\r\n    if (isBoardInOrder(board)) {\r\n      clearInterval(intervalId);\r\n      setRankings((prevRankings) => [...prevRankings, { moves: moves, time }]);\r\n      setGameCleared(true);\r\n    }\r\n  }, [board]);\r\n\r\n  const shuffleBoard = (flatBoard) => {\r\n    const shuffledBoard = [...flatBoard];\r\n    for (let i = shuffledBoard.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffledBoard[i], shuffledBoard[j]] = [shuffledBoard[j], shuffledBoard[i]];\r\n    }\r\n    return shuffledBoard;\r\n  };\r\n\r\n  const chunks = (arr, size) =>\r\n    Array.from({ length: Math.ceil(arr.length / size) }, (_, i) =>\r\n      arr.slice(i * size, i * size + size)\r\n    );\r\n\r\n  const isSolvable = (board, rows, columns) => {\r\n    const flatBoard = board.flat ? board.flat() : board;\r\n    let inversions = 0;\r\n    const emptyTileIndex = flatBoard.indexOf('');\r\n    for (let i = 0; i < flatBoard.length - 1; i++) {\r\n      for (let j = i + 1; j < flatBoard.length; j++) {\r\n        if (flatBoard[i] && flatBoard[j] && flatBoard[i] > flatBoard[j]) {\r\n          inversions++;\r\n        }\r\n      }\r\n    }\r\n    if (columns % 2 === 1) {\r\n      return inversions % 2 === 0;\r\n    } else {\r\n      const emptyRow = Math.floor(emptyTileIndex / columns);\r\n      return (inversions + emptyRow) % 2 === 1;\r\n    }\r\n  };\r\n\r\n  const isBoardInOrder = (board) => {\r\n    const flatBoard = board.flat();\r\n    for (let i = 0; i < flatBoard.length - 1; i++) {\r\n      if (flatBoard[i] !== i + 1) return false;\r\n    }\r\n    return flatBoard[flatBoard.length - 1] === '';\r\n  };\r\n\r\n  const handleCellClick = (rowIndex, colIndex) => {\r\n    if (mode === 'image' && !image) return;\r\n\r\n    const emptyCell = findEmptyCell();\r\n    if (isValidMove(rowIndex, colIndex, emptyCell)) {\r\n      let newBoard = [];\r\n      setBoard((prevBoard) => {\r\n        newBoard = prevBoard.map(row => [...row]);\r\n        const [rowDir, colDir] = [Math.sign(rowIndex - emptyCell.row), Math.sign(colIndex - emptyCell.col)];\r\n        let currentRow = emptyCell.row, currentCol = emptyCell.col;\r\n        while (currentRow !== rowIndex || currentCol !== colIndex) {\r\n          const nextRow = currentRow + rowDir, nextCol = currentCol + colDir;\r\n          newBoard[currentRow][currentCol] = newBoard[nextRow][nextCol];\r\n          currentRow = nextRow;\r\n          currentCol = nextCol;\r\n        }\r\n        newBoard[rowIndex][colIndex] = '';\r\n        return newBoard;\r\n      });\r\n      setMoves((prevMoves) => prevMoves + 1);\r\n      if (!gameStarted) {\r\n        setGameStarted(true);\r\n        const id = setInterval(() => setTime((prevTime) => prevTime + 1), 1000);\r\n        setIntervalId(id);\r\n      }\r\n    }\r\n  };\r\n\r\n  const findEmptyCell = () => {\r\n    for (let rowIndex = 0; rowIndex < board.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < board[rowIndex].length; colIndex++) {\r\n        if (board[rowIndex][colIndex] === '') {\r\n          return { row: rowIndex, col: colIndex };\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const isValidMove = (rowIndex, colIndex, emptyCell) => {\r\n    return rowIndex === emptyCell.row || colIndex === emptyCell.col;\r\n  };\r\n\r\n  const handleModeChange = (newMode) => {\r\n    setMode(newMode);\r\n    setImage(null);\r\n    setSize({ rows: 4, columns: 4 });\r\n    generateBoard();\r\n  };\r\n\r\n  const handleSizeChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setSize((prevSize) => ({\r\n      ...prevSize,\r\n      [name]: parseInt(value, 10),\r\n    }));\r\n  };\r\n\r\n  const handleNewGame = () => {\r\n    setMoves(0);\r\n    setTime(0);\r\n    setGameStarted(false);\r\n    if (intervalId) {\r\n      clearInterval(intervalId);\r\n      setIntervalId(null);\r\n    }\r\n    generateBoard();\r\n  };\r\n\r\n  const handleReset = () => {\r\n    if (intervalId) {\r\n      clearInterval(intervalId);\r\n      setIntervalId(null);\r\n    }\r\n    setMoves(0);\r\n    setTime(0);\r\n    setGameStarted(false);\r\n    setImage(null);\r\n    setSize({ rows: 4, columns: 4 });\r\n    generateBoard();\r\n  };\r\n\r\n  const handleImageUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setImage(e.target.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mode === 'image' && image) {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        const aspectRatio = img.width / img.height;\r\n        let rows = 4;\r\n        let columns = Math.round(4 * aspectRatio);\r\n        columns = Math.max(2, columns);\r\n        setSize({ rows, columns });\r\n      };\r\n      img.src = image;\r\n    }\r\n  }, [image, mode]);\r\n\r\n  const handleAssistModeChange = () => {\r\n    setAssistMode(!assistMode);\r\n  };\r\n\r\n  const handleImageDropAreaClick = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"puzzle-container\">\r\n      <h1 className=\"title\">15 Puzzle Game</h1>\r\n      <div className=\"controls\">\r\n        <div className=\"mode-buttons\">\r\n          <button\r\n            className={`mode-button ${mode === 'normal' ? 'active' : ''}`}\r\n            onClick={() => handleModeChange('normal')}\r\n          >\r\n            通常モード\r\n          </button>\r\n          <button\r\n            className={`mode-button ${mode === 'image' ? 'active' : ''}`}\r\n            onClick={() => handleModeChange('image')}\r\n          >\r\n            画像モード\r\n          </button>\r\n        </div>\r\n        <div className=\"size-controls\">\r\n          {mode === 'normal' && (\r\n            <>\r\n              縦:\r\n              <input\r\n                type=\"number\"\r\n                name=\"rows\"\r\n                className=\"size-input\"\r\n                value={size.rows}\r\n                onChange={handleSizeChange}\r\n                min=\"2\"\r\n                max=\"10\"\r\n              />\r\n              横:\r\n              <input\r\n                type=\"number\"\r\n                name=\"columns\"\r\n                className=\"size-input\"\r\n                value={size.columns}\r\n                onChange={handleSizeChange}\r\n                min=\"2\"\r\n                max=\"10\"\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n        <button className=\"new-game-button\" onClick={handleNewGame}>\r\n          新しいゲーム\r\n        </button>\r\n        <button className=\"reset-button\" onClick={handleReset}>\r\n          リセット\r\n        </button>\r\n        {mode === 'image' && (\r\n          <div className=\"image-controls\">\r\n            <button className=\"image-upload-button\" onClick={handleImageDropAreaClick}>\r\n              画像を変更\r\n            </button>\r\n            <input\r\n              type=\"file\"\r\n              ref={fileInputRef}\r\n              onChange={handleImageUpload}\r\n              accept=\"image/*\"\r\n              style={{ display: 'none' }}\r\n            />\r\n            {image && <img src={image} alt=\"uploaded\" className=\"uploaded-image-preview\" />}\r\n          </div>\r\n        )}\r\n        {mode === 'image' && (\r\n          <div className=\"assist-mode\">\r\n            <label>\r\n              <input type=\"checkbox\" checked={assistMode} onChange={handleAssistModeChange} />\r\n              補助モード\r\n            </label>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div\r\n        className=\"board\"\r\n        style={{\r\n          gridTemplateRows: `repeat(${size.rows}, 1fr)`,\r\n          gridTemplateColumns: `repeat(${size.columns}, 1fr)`,\r\n          aspectRatio: `${size.columns} / ${size.rows}`,\r\n        }}\r\n      >\r\n        {board.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => (\r\n            <button\r\n              key={`${rowIndex}-${colIndex}`}\r\n              className={`cell ${cell === '' ? 'empty' : ''}`}\r\n              onClick={() => handleCellClick(rowIndex, colIndex)}\r\n              style={{\r\n                backgroundImage: mode === 'image' && cell && image ? `url(${image})` : 'none',\r\n                backgroundSize: `${size.columns * 100}% ${size.rows * 100}%`,\r\n                backgroundPosition: mode === 'image' && cell && image\r\n                  ? `${((cell - 1) % size.columns) / (size.columns - 1) * 100}% ${Math.floor((cell - 1) / size.columns) / (size.rows - 1) * 100}%`\r\n                  : 'none',\r\n                border: mode === 'image' && assistMode && cell ? '1px solid #000' : 'none',\r\n                color: mode === 'image' && assistMode && cell ? '#fff' : 'inherit',\r\n                textShadow: mode === 'image' && assistMode && cell ? '2px 2px 4px #000' : 'none',\r\n              }}\r\n            >\r\n              {mode === 'normal' || assistMode ? cell : ''}\r\n            </button>\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"stats\">\r\n        <p>移動回数: {moves}</p>\r\n        <p>経過時間: {time}秒</p>\r\n      </div>\r\n      {gameCleared && (\r\n        <div className=\"completion-message\">\r\n          <p>クリア！おめでとう！</p>\r\n          <p>移動回数: {moves} 手</p>\r\n          <p>経過時間: {time} 秒</p>\r\n          <div className=\"completed-board\">\r\n            {board.map((row, rowIndex) =>\r\n              row.map((cell, colIndex) => (\r\n                <div\r\n                  key={`${rowIndex}-${colIndex}`}\r\n                  className=\"completed-cell\"\r\n                  style={{\r\n                    backgroundImage: mode === 'image' && cell && image ? `url(${image})` : 'none',\r\n                    backgroundSize: `${size.columns * 100}% ${size.rows * 100}%`,\r\n                    backgroundPosition: mode === 'image' && cell && image\r\n                      ? `${((cell - 1) % size.columns) / (size.columns - 1) * 100}% ${Math.floor((cell - 1) / size.columns) / (size.rows - 1) * 100}%`\r\n                      : 'none',\r\n                    border: '1px solid #000',\r\n                    color: '#fff',\r\n                    textShadow: '2px 2px 4px #000',\r\n                  }}\r\n                >\r\n                  {cell}\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"rankings\">\r\n        <h2>ランキング</h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>順位</th>\r\n              <th>移動回数</th>\r\n              <th>時間</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rankings.map((ranking, index) => (\r\n              <tr key={index}>\r\n                <td>{index + 1}</td>\r\n                <td>{ranking.moves}</td>\r\n                <td>{ranking.time}秒</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FifteenPuzzle;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport FifteenPuzzle from './FifteenPuzzle';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <FifteenPuzzle />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}